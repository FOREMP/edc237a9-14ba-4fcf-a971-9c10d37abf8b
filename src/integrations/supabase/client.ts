
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zgcsgwlggvjvvshhhcmb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnY3Nnd2xnZ3ZqdnZzaGhoY21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM0NTAwMTUsImV4cCI6MjA1OTAyNjAxNX0.rquwTuuTUAVWbv9qD47dGDJ_5eRd1mZYHJqVFIzIDMs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configure the client with explicit authentication settings
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage,
    detectSessionInUrl: true
  }
});

// Export a utility function to clean up auth state
export const cleanupAuthState = () => {
  try {
    // Remove all Supabase auth keys from localStorage
    Object.keys(localStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
    
    // Remove from sessionStorage if in use
    if (typeof sessionStorage !== 'undefined') {
      Object.keys(sessionStorage).forEach((key) => {
        if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
          sessionStorage.removeItem(key);
        }
      });
    }
  } catch (e) {
    console.error("Error cleaning up auth state:", e);
  }
};
