
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zgcsgwlggvjvvshhhcmb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnY3Nnd2xnZ3ZqdnZzaGhoY21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM0NTAwMTUsImV4cCI6MjA1OTAyNjAxNX0.rquwTuuTUAVWbv9qD47dGDJ_5eRd1mZYHJqVFIzIDMs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configure the client with explicit authentication settings
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage,
    detectSessionInUrl: true,
    flowType: 'pkce'  // Added explicit PKCE flow type for better security
  },
  global: {
    headers: {
      'x-client-info': 'lovable-web'  // Add client info for better debugging
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  db: {
    schema: 'public'
  }
});

// Export a utility function to clean up auth state
export const cleanupAuthState = () => {
  try {
    // Remove all Supabase auth keys from localStorage
    Object.keys(localStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
    
    // Remove from sessionStorage if in use
    if (typeof sessionStorage !== 'undefined') {
      Object.keys(sessionStorage).forEach((key) => {
        if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
          sessionStorage.removeItem(key);
        }
      });
    }
    
    // Additional cleanup for any custom auth state
    localStorage.removeItem('auth-state');
    localStorage.removeItem('auth-user');
    localStorage.removeItem('auth-session');
    
    // Force browser to forget cached auth state
    if (navigator && navigator.serviceWorker) {
      try {
        navigator.serviceWorker.ready.then(registration => {
          registration.active?.postMessage({
            type: 'CLEAR_AUTH_CACHE'
          });
        });
      } catch (e) {
        console.warn("Could not clear service worker cache:", e);
      }
    }
    
    console.log("Auth state cleanup completed");
  } catch (e) {
    console.error("Error cleaning up auth state:", e);
  }
};

// Add a diagnostic helper function for debugging RLS issues
export const testRlsPermissions = async (userId: string) => {
  try {
    // Test profiles access
    const profileResult = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    // Test preferences access
    const prefsResult = await supabase
      .from('user_preferences')
      .select('*')
      .eq('user_id', userId)
      .maybeSingle();
    
    // Test job posting limits access
    const limitsResult = await supabase
      .from('job_posting_limits')
      .select('*')
      .eq('user_id', userId)
      .maybeSingle();
    
    // Test subscribers table access
    const subResult = await supabase
      .from('subscribers')
      .select('*')
      .eq('user_id', userId)
      .maybeSingle();
    
    return {
      timestamp: new Date().toISOString(),
      tests: {
        profiles: { 
          success: !profileResult.error, 
          error: profileResult.error?.message || null 
        },
        preferences: { 
          success: !prefsResult.error, 
          error: prefsResult.error?.message || null 
        },
        jobLimits: { 
          success: !limitsResult.error, 
          error: limitsResult.error?.message || null 
        },
        subscribers: { 
          success: !subResult.error, 
          error: subResult.error?.message || null 
        }
      },
      userId
    };
  } catch (error) {
    return {
      timestamp: new Date().toISOString(),
      error: error instanceof Error ? error.message : String(error),
      userId
    };
  }
};
